/** \page Tutorial

<h1>Tutorial</h1>

Let's face it, you'd probably rather be having sex than reading this tutorial.
So we'll try to make this as fun, short, and informative as possible so you can
build the game, make the money, impress the girl because you can have fun and
make ridiculous sums of cash and at the same time to feed her shoe fetish, chocolate
lust, and take her luxurious vaccations to your beach house in the Carribean. A
beach house, in which, finally, after all your hard work, you get to have sex.
Glorious sex, the stuff dreams aspire to be, sex that both porn directors and
romance novelists fail to even imagine, let alone capture in their respective
mediums. If you're a woman, well, the story is going to be a bit different, get
ready to start beating nerds away with a goddamn stick, a savvy game developing
girl is going to be in high demand. I suggest getting a man with some muscle,
someone imposing enough to keep the other men in line, but smart enough to talk
code with you, and sensitive enough to know when the talking should stop, and the
loving should begin. As for the rest of the story, ladies, literally volumes of
them have been written, I suggest anything by Teresa Medeiros, she's pretty good
as far as romance authors go. Go look her up, I'll wait.

Anwyays, no matter your gender, right now you're at step 1, this tutorial, so let's
get started.

As with any great act, we must first set the stage. Like all other ambitious
projects, it starts with \c main.cpp :

\code
#include <Engine/All.hpp>

int main()
{
    Engine e("My Awesome Game!", 640, 480);

    e.Looptastic();

    return 0;
}
\endcode

Assuming the header files are included in your compiler's search path, and that
you've linked against the engine, sfml-system, sfml-window, sfml-graphics, and
sfml-audio, this will compile and produce a beautiful blank, black window! Yay!

This is so simple, that an explanation almost doesn't seem worth it. But let's
break it down. The two most important lines thus far, and the only ones that
really *do* anything you're probably not yet aware of are these two lines:

\code
Engine e("My Awesome Game!", 640, 480);
e.Looptastic();
\endcode

The first line is the constructor for the Engine class, the first argument is
the title for the game window, the second and third arguments are the width and
height of the game window, respectively. This gives us access to all the vast
resources that constitute the Engine. After this, you would do some basic
initialization of your game, and then you call \c Engine.Looptastic() , which
starts the game loop running.

If you examine the documentation, you'd find that this is the only constructor
for Engine, and the only arguments it takes. "BUT WAIT!", you might be thinking,
"surely there's more than just those three things that I'll need to change!"
Well, it turns out that in our experience, there isn't. That's it.

On the off-chance that there is something else that you need to change, we
provide facilities for doing so. In most cases you'll need at least a cursory
understanding of SFML, infact, we recommend a good working knowledge of SFML when
using this engine. It's not a requirement, but it helps, especially in cases like
this where you're doing something nonstandard.

Let's say you needed to change the framerate, how would you do it? There are a few
ways of doing it, and context usually determines which one is the best. No matter
how you do it though, you need to get access to the \c sf::App that \c Engine has
inside of it. The simplist and most obvious way is to do this:

\code
e.App->SetFramerateLimit(30);
\endcode

But thoughtful observers will note that this only works in the context of
\c main() , where the \c e variable exists. A more far-reaching version is
this:

\code
_E.App->SetFramerateLimit(30);
\endcode

_E is a macro that grabs the current instance of the engine, and will work
basically anywhere that \e Engine.hpp is included.

As it turns out, calling methods on App happens surprisingly often, so the
following form was implemented and can also be used to achieve the same result:

\code
_App(SetFramerateLimit(30));
\endcode

<h2>GameObjects, Text, AniObject, Sound/Music</h2>

TODO

<h2>Game States</h2>

TODO

<h2>I Need Help!</h2>

Read this Tutorial, make sure you haven't missed anything, look at the
documentation, and see if you can find what you're looking for in there. Then
look at your code and make sure you aren't doing anything wrong. If all else
fails, or if you would just talk to a person rather than code, talk to Tyler,
he'll tell you how it works, or what's gone wrong.

<h2>It Doesn't Do X!</h2>

(X meaning any feature that you think the engine should handle)

Yep, it doesn't, we're sorry. Odds are though that we have a really good reason
for it not doing X, it's because we haven't *needed* it. Tyler, as chief architect
of the engine, feels that the engine should do everything it needs to, and nothing
more. Bloat sucks, and is a general pain in the ass, exasterbated by the fact that
we're using C++, so adding a myriad of whimisical features is not a Good Thing(tm).

If you honestly feel that feature X would make the engine significantly better,
pitch it to one of the engine's developers. Better yet, implement it, give one
of the developers a preview of it, and ask them to integrate it. If they like it
enough, they'll put it in. If they don't put it in, don't take it personally or
anything, not every feature belongs in the engine, but that doesn't mean you can't
use it in your own game!

<h2>This Engine Sucks!</h2>

Really? I'm sorry, I didn't mean for it to suck. Tell ya what, tell me (Tyler)
about your problems, and I'll see what I can do to fix 'em, alright?

*/
